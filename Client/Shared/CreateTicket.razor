@page "/createTicket"
@page "/createTicket/{ticketId:int}"

@inject ITicketService TicketService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@if (Ticket.TicketId == 0)
{
    <h3 style="text-align:center; margin-top:50px; ">Create Ticket</h3> 
}
else
{
    <h3 style="text-align:center; margin-top:50px; ">Update Ticket ID : @Ticket.TicketId </h3>
}


<EditForm Model="Ticket" OnValidSubmit="HandleTicketSubmit">
    <DataAnnotationsValidator />
    <div style="border: 0.5px solid black; border-radius: 5px; padding: 20px; max-width: 50%; margin-left: 25%; margin-top: 50px; margin-bottom: 50px; background-color: #2B2B2B; color: #ffffff;">
        <div class="form-group">
            <label>Ticket Name</label>
            <InputText @bind-Value="Ticket.TicketName" class="form-control"></InputText>
            <ValidationMessage For="@(()=> Ticket.TicketName)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>Ticket Description</label>
            <InputText @bind-Value="Ticket.TicketDescription" class="form-control"></InputText>
            <ValidationMessage For="@(()=> Ticket.TicketDescription)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>Ticket Status</label>
            @*<InputText @bind-Value="Ticket.TicketStatus" class="form-control"></InputText>*@
            <InputSelect @bind-Value="Ticket.TicketStatus" class="form-control">
                <option value="">Select Ticket Status ...</option>
                <option value="Todo">Todo</option>
                <option value="Inprogress">Inprogress</option>
                <option value="Completed">Completed</option>
            </InputSelect>
            <ValidationMessage For="@(()=> Ticket.TicketStatus)"></ValidationMessage>
        </div>

        <div class="form-group">
                <label>Project Name</label>
                <InputText @bind-Value="Ticket.ProjectName" class="form-control"></InputText>
                <ValidationMessage For="@(()=> Ticket.ProjectName)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label>Assign this ticket to user(User Name)</label>
                <InputText @bind-Value="Ticket.UserName" class="form-control"></InputText>
                <ValidationMessage For="@(()=> Ticket.UserName)"></ValidationMessage>
            </div>


        @if (Ticket.TicketId == 0)
        {
            <button type="submit" style="margin-left: 40%; max-width: 20%; background-color: #16FB9; " class="btn btn-primary">Create</button> }
        else
        {
            <button type="submit" style="margin-left: 40%; max-width: 20%; background-color: #16FB9; " class="btn btn-primary">Update</button>
        }

    </div>
</EditForm>

@code { 
    [Parameter]
    public int TicketId { get; set; }
    public CW2.Shared.Ticket Ticket { get; set; } = new CW2.Shared.Ticket();

    protected override async Task OnInitializedAsync()
    {
        if (this.TicketId != 0)
        {
            this.Ticket = await TicketService.GetSingleTicket(this.TicketId);
        }

    }


    async void HandleTicketSubmit()
    {
        await JSRuntime.InvokeVoidAsync("console.log", Ticket);

        if (Ticket.TicketId == 0)
        {
            Console.WriteLine("Create was done");
            await TicketService.CreateTicket(Ticket);
            await JSRuntime.InvokeVoidAsync("alert", $"Ticket was created Successfully!");
        }
        else
        {
            Console.WriteLine("Update was done");
            await TicketService.UpdateTicket(Ticket, Ticket.TicketId);
            await JSRuntime.InvokeVoidAsync("alert", $"Ticket was updated Successfully!");
        }

        NavigationManager.NavigateTo("tickets");
    }
}
