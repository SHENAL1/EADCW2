@page "/createUser"
@page "/createUser/{userId:int}"

@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@if (User.UserId == 0)
{
    <h3 style="text-align:center;">Create User</h3>
}
else
{
    <h3 style="text-align:center;">Update @User.UserName </h3>
}


<EditForm Model="User" OnValidSubmit="HandleUserSubmit">
    <DataAnnotationsValidator />

    <div style="border: 0.5px solid black; border-radius: 5px; padding: 20px; max-width: 50%; margin-left: 25%; margin-bottom: 50px; background-color: #300c4d; color: #ffffff;">

        <div class="form-group">
            <label>User Name</label>
            <InputText @bind-Value="User.UserName" class="form-control"></InputText>
            <ValidationMessage For="@(()=> User.UserName)"></ValidationMessage>
        </div>
        @*<div class="form-group">
            <label>Password</label>
            <InputText @bind-Value="User.Password" class="form-control"></InputText>
            <ValidationMessage For="@(()=> User.Password)"></ValidationMessage>
        </div>*@

        <div class="form-group">
            <label>First Name</label>
            <InputText @bind-Value="User.FirstName" class="form-control"></InputText>
            <ValidationMessage For="@(()=> User.FirstName)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>Last Name</label>
            <InputText @bind-Value="User.LastName" class="form-control"></InputText>
            <ValidationMessage For="@(()=> User.LastName)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>Email</label>
            <InputText @bind-Value="User.UserEmail" class="form-control"></InputText>
            <ValidationMessage For="@(()=> User.UserEmail)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>Phone Number</label>
            <InputText @bind-Value="User.UserPhoneNo" class="form-control"></InputText>
            <ValidationMessage For="@(()=> User.UserPhoneNo)"></ValidationMessage>
        </div>
        <div class="form-group">
            <label>User Type</label>
            @*<InputText @bind-Value="User.UserType" class="form-control"></InputText>*@
            <InputSelect @bind-Value="User.UserType" class="form-control">
                <option value="">Select User Type ...</option>
                <option value="Admin">Admin</option>
                <option value="Developer">Developer</option>

            </InputSelect>
            <ValidationMessage For="@(()=> User.UserType)"></ValidationMessage>
        </div>



        @if (User.UserId == 0)
        {
            <button type="submit" style="margin-left:40%; max-width:20%; background-color:#007EA7; " class="btn btn-primary">Submit</button> 
        }
        else
        {
            <button type="submit" style="margin-left:40%; max-width:20%; background-color:#007EA7; " class="btn btn-primary">Update</button>
        }
    </div>
</EditForm>

@code {
    [Parameter]
    public int UserId { get; set; }
    public CW2.Shared.User User { get; set; } = new CW2.Shared.User();

    protected override async Task OnInitializedAsync()
    {
        if (this.UserId != 0)
        {
            this.User = await UserService.GetSingleUser(this.UserId);
        }

    }

    async void HandleUserSubmit()
    {
        await JSRuntime.InvokeVoidAsync("console.log", User);

        if (User.UserId == 0)
        {
            Console.WriteLine("Create was done");
            await UserService.CreateUser(User);
            await JSRuntime.InvokeVoidAsync("alert", $"User was created Successfully!");
        }
        else
        {
            Console.WriteLine("Update was done");
            await UserService.UpdateUser(User, User.UserId);
            await JSRuntime.InvokeVoidAsync("alert", $"Ticket was updated Successfully!");
        }

        NavigationManager.NavigateTo("users");
    }
}
